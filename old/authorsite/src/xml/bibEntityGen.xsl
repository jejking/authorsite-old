<?xml version="1.0" encoding="UTF-8" ?>
<!-- $Header$ -->
<!--
    Document   : bibEntityGen.xsl
    Created on : 28 October 2002, 12:52
    Author     : jejking
    Description:
        Generates java/xdoclet source code for mediaType details entity EJBs
        
 * Copyright (C) 2002  John King
 *
 * This file is part of the authorsite.org bibliographic
 * application.
 *
 * This application is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.        
-->

<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:types="http://www.authorsite.org/bibFieldTypeMappings">
    <xsl:output method="text"/>
    
    <!-- type map -->
    <types:type fieldType="string">java.lang.String</types:type>
    <types:type fieldType="integer">int</types:type>
    <types:type fieldType="float">float</types:type>
    <types:type fieldType="text">java.lang.String</types:type>
    <types:type fieldType="blob">java.lang.Object</types:type>
    <types:type fieldType="boolean">boolean</types:type>
    
    <xsl:template match="/">
        <xsl:apply-templates select="mediaType" mode="buildJavaClass"/>
    </xsl:template>

<xsl:template match="mediaType" mode="buildJavaClass">
/*
 * <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsBean.java
 * 
 * This java/xdoclet source file was automatically generated by bibEntityGen.xsl from the 
 * standard bibTypesRelationships.xsl as part of the authorsite.org bibliography application
 * build process. 
 *
 * Do not edit this source file directly, but make any alterations to bibTypesRelationships.xml
 */
package org.authorsite.bib.ejb.entity;
import javax.ejb.*;
import java.util.*;
/**
 * @ejb:bean name="<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsEJB"
 *              type="CMP"
 *              reentrant="false"
 *              cmp-version="2.x"
 *              schema="<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>Details"
 *              primkey-field="<xsl:value-of select="@name"/>DetailsID"
 *              view-type="local"
 *              local-jndi-name="ejb/<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsLocalEJB"
 * @ejb:interface local-class="org.authorsite.bib.ejb.entity.<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsLocal"
 *                generate="local"
 * @ejb:home    local-class="org.authorsite.bib.ejb.entity.<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsLocalHome"
 *              generate="local"
 * @ejb:pk class="java.lang.Integer"
 *
 * @ejb:transaction type="required"
 *
 <xsl:for-each select="field[@searchable='true']">
 <xsl:call-template name="generateFinderSignature">
            <xsl:with-param name="fieldName" select="@fieldName"/>
            <xsl:with-param name="fieldType" select="@fieldType"/>
</xsl:call-template>* query="select Object() from <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="../@name"/>
   </xsl:call-template>Details where <xsl:value-of select="@fieldName"/> = ?1"
 </xsl:for-each>
 *<!--
 * @ejb.value-object select="*" name="<xsl:call-template name="capitaliseFirstLetter"><xsl:with-param name="word" select="@name"/></xsl:call-template>"
 *                   extends="org.authorsite.bib.dto.MediaItemDetailsDTO" -->
 * @jboss:table-name table-name="<xsl:value-of select="@name"/>Details"
 * @jboss:cmp-field field-name="<xsl:value-of select="@name"/>DetailsID" column-name="<xsl:value-of select="@name"/>DetailsID"
 <xsl:for-each select="field">* @jboss:cmp-field field-name="<xsl:value-of select="@fieldName"/>" column-name="<xsl:value-of select="@fieldName"/>"
 </xsl:for-each>**/

public abstract class <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsBean extends MediaItemDetailsBean {
    
    
    
    /**
     * @ejb:create-method
     */
    public Integer ejbCreate(int newID <xsl:call-template name="generateCreateParams">       
                                            <xsl:with-param name="obligatoryFields" select="field[@priority='obligatory']"/>
                                                </xsl:call-template>) throws CreateException {
        set<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsID(new Integer(newID));
        <xsl:for-each select="field[@priority='obligatory']">
        set<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@fieldName"/>
   </xsl:call-template>(new<xsl:value-of select="@fieldName"/>);
        </xsl:for-each>
        return null;
    }
    
    public void ejbPostCreate(int newID <xsl:call-template name="generateCreateParams">       
                                            <xsl:with-param name="obligatoryFields" select="field[@priority='obligatory']"/>
                                                </xsl:call-template>) {
    }
                                                
    /**
     * @ejb.interface-method view-type="local"
     */
    public String getMediaType() {
        return ("<xsl:value-of select="name"/>");
    }
    
    
    /**
     * @ejb:persistent-field
     * @ejb:pk-field
     * @ejb:interface-method view-type="local"
     */
    public abstract Integer get<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsID();
    
    /**
     * @ejb:persistent-field
     */
    public abstract void set<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsID(Integer newID);
    
   <xsl:for-each select="field">
    /**
     * @ejb:persistent-field
     * @ejb:interface-method view-type="local"
     */
     <xsl:call-template name="generateGetMethod">
        <xsl:with-param name="fieldName" select="@fieldName"/>
        <xsl:with-param name="fieldType" select="@fieldType"/>
     </xsl:call-template>
    
    /**
     * @ejb:persistent-field
     * @ejb:interface-method view-type="local"
     */
    <xsl:call-template name="generateSetMethod">
        <xsl:with-param name="fieldName" select="@fieldName"/>
        <xsl:with-param name="fieldType" select="@fieldType"/>
    </xsl:call-template>
   </xsl:for-each> 
   
    
    
}
</xsl:template>    
    
    
    
    <xsl:template name="generateFinderSignature">
    <xsl:param name="fieldName"/>
<xsl:param name="fieldType"/> * @ejb:select finder signature="java.util.Collection findBy<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="$fieldName"/>
   </xsl:call-template>(<xsl:value-of select="document('')/*/types:type[@fieldType=$fieldType]"/>)"    
    </xsl:template>

  <xsl:template name="generateGetMethod">
  <xsl:param name="fieldName"/>
  <xsl:param name="fieldType"/>public abstract <xsl:value-of select="document('')/*/types:type[@fieldType=$fieldType]"/> get<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="$fieldName"/></xsl:call-template>();
  </xsl:template>
    
   <xsl:template name="generateSetMethod">
           <xsl:param name="fieldName"/>
        <xsl:param name="fieldType"/>public abstract void set<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="$fieldName"/>
   </xsl:call-template>(<xsl:value-of select="document('')/*/types:type[@fieldType=$fieldType]"/> new<xsl:value-of select="$fieldName"/>);  
   </xsl:template>

   <xsl:template name="capitaliseFirstLetter">
        <xsl:param name="word"/>
<xsl:value-of select="translate (substring($word, 1, 1), 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/><xsl:value-of select="substring($word, 2)"/>
   </xsl:template>
   
   <xsl:template name="generateCreateParams">
    <xsl:param name="obligatoryFields"/>
<xsl:for-each select="$obligatoryFields">,
<xsl:value-of select="document('')/*/types:type[@fieldType=$obligatoryFields/@fieldType]"/> new<xsl:value-of select="@fieldName"/>
</xsl:for-each>
   </xsl:template>
   
</xsl:stylesheet> 