<?xml version="1.0" encoding="UTF-8" ?>

<!--
    Document   : MediaItemManagementCreateCoreForm.xsl
    Created on : 07 February 2003, 10:40
    Author     : jejking
    Description:
        Writes MediaItemManagementCreateCoreForm.java using the mediaTypes from bibTypesRelationships.xml
    $Header$
    Version: $Revision$
    
 * Copyright (C) 2003  John King
 *
 * This file is part of the authorsite.org bibliographic
 * application.
 *
 * This application is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.    
-->

<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:bib="http://www.authorsite.org/bibTypesRelationships">

<xsl:output method="text"/>

<!-- template rule matching source root element -->
<xsl:template match="/">
<!-- we basically write the java source in here and add the mediaType names from bibTypesRelationships.xml in the validate method -->    
/**
 * This java/xdoclet source file was automatically generated by MediaItemManagementCreateCoreFormGen.xsl from the 
 * standard bibTypesRelationships.xml as part of the authorsite.org bibliography application
 * build process. 
 *
 * Do not edit this source file directly, but make any alterations to bibTypesRelationships.xml or to 
 * MediaItemManagementCreateCoreFormGen.xsl
 */
package org.authorsite.bib.web.struts.form;
import java.util.*;
import javax.servlet.http.*;
import org.apache.struts.action.*;
import org.apache.struts.util.*;
import org.authorsite.bib.web.util.*;
/**
 * @author  jejking
 * @version Dynamically Generated
 */
public class MediaItemManagementCreateCoreForm extends ActionForm {
    
    // attribute definitions
    private ArrayList validMediaTypes; // populated using methods generated by xsl
    private String title;
    private String mediaType;
    private String year;
    private String additionalInfo;
    private String comment;
    
    // constructor. methods here populate the validMediaTypes ArrayList
    public MediaItemManagementCreateCoreForm() {
        validMediaTypes = new ArrayList();
        <xsl:for-each select="/bib:typesAndRelationships/mediaType">
            validMediaTypes.add("<xsl:value-of select="@name"/>");
        </xsl:for-each>
    }
        
    // getters and setters
    public String getTitle() {
        return title;
    }
    
    public void setTitle(String newTitle) {
        title = InputChecker.cleanTitle(newTitle.trim());;
    }
    
    public String getMediaType() {
        return mediaType;
    }
    
    public void setMediaType(String newMediaType) {
        mediaType = newMediaType;
    }
    
    public String getYear() {
        return year;
    }
    
    public void setYear(String newYear) {
        year = newYear;
    }
    
    public String getAdditionalInfo() {
        return additionalInfo;
    }
    
    public void setAdditionalInfo(String newAdditionalInfo) {
        additionalInfo = InputChecker.cleanComment(newAdditionalInfo.trim());
    }
    
    public String getComment() {
        return comment;
    }
    
    public void setComment(String newComment) {
        comment = InputChecker.cleanComment(newComment.trim());
    }
    
    public ActionErrors validate(ActionMapping mapping, HttpServletRequest req) {
        ActionErrors errors = new ActionErrors();
        
        MessageResources resources = (MessageResources)req.getAttribute(Action.MESSAGES_KEY);
        String titleText = resources.getMessage("web.bibPublic.formlabels.title");
        String mediaTypeText = resources.getMessage("web.bibPublic.formlabels.mediaType");
        String yearText = resources.getMessage("web.bibPublic.formlabels.year");
        String additionalInfoText = resources.getMessage("web.bibPublic.formlabels.additionalInfo");
        String commentText = resources.getMessage("web.bibPublic.formlabels.comment");
        
        // validate title
        if (title == null || title.length() == 0) {
            ActionError newError = new ActionError("web.errors.requiredFieldMissing", titleText);
            errors.add(ActionErrors.GLOBAL_ERROR, newError);
        }
        
        if (title.length() > 1000) {
            ActionError newError = new ActionError("web.errors.fieldTooLong", titleText, "1000");
            errors.add(ActionErrors.GLOBAL_ERROR, newError);
        }
        
        // validate mediaType. must be in the list of validMediaTypes
        if (!validMediaTypes.contains(mediaType)) {
            ActionError newError = new ActionError("web.errors.invalidOption", mediaType);
            errors.add(ActionErrors.GLOBAL_ERROR, newError);
        }
              
        // validate year
        if (year == null || year.length() == 0) {
            ActionError newError = new ActionError("web.errors.requiredFieldMissing", yearText);
            errors.add(ActionErrors.GLOBAL_ERROR, newError);
            return errors; // otherwise we'll get null pointer exceptions when we try and do more with year
        }
        
        if (!InputChecker.isInteger(year)) {
            ActionError newError = new ActionError("web.errors.notAnInteger", yearText);
            errors.add(ActionErrors.GLOBAL_ERROR, newError);
            return errors; // otherwise comparisons will fail with NumberFormatExceptions...
        }
        
        // year cannot be in future
        Calendar now = Calendar.getInstance();
        int thisYear = now.get(Calendar.YEAR);
        if (Integer.parseInt(year) > thisYear) {
            ActionError newError = new ActionError("web.errors.yearInFuture", year);
            errors.add(ActionErrors.GLOBAL_ERROR, newError);
        }
        // year cannot be unfeasibly far into the past either. hm, when was writing invented?? lets say between 3000 and 4000 BC
        // obviously, one might want to use the system to classify things like cave paintings, in which case this method
        // must be changed
        if (Integer.parseInt(year) &lt; -4000) {
            ActionError newError = new ActionError("web.errors.yearTooFarInPast", year);
            errors.add(ActionErrors.GLOBAL_ERROR, newError);
        }
        
        // because additionalInfo and comment are not compulsory fields and because they are represented as "text" datatypes
        // in the db, there is no need to check for their presence or ensure they do not exceed a maximum length
        
        return errors;
        
    }
    
    public void reset(ActionMapping mapping, HttpServletRequest request) {
        resetFields();
    }
    
    private void resetFields() {
        title = "";
        mediaType = "";
        year = "";
        additionalInfo = "";
        comment = "";
    }
    
}
</xsl:template>
</xsl:stylesheet> 
