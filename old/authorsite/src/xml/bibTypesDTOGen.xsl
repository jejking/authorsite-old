<?xml version="1.0" encoding="UTF-8" ?>

<!--
    Document   : bibTypesDTOGen.xsl
    Created on : 26 November 2002, 10:51
    Author     : jejking
    Description:
        Generates custom java source for DTO classes for each specific mediaType.
        Will be used as part of the build process, being called from ant.
        The reason is that I don't have time to learn how to customise the xdoclet
        value-object template/task to generate exactly the code I want. Because we are 
        generating the EJB code from xml via xslt anyway, this way is quicker and easier.
        
 * Copyright (C) 2003  John King
 *
 * This file is part of the authorsite.org bibliographic
 * application.
 *
 * This application is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.        
-->

<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:types="http://www.authorsite.org/bibFieldTypeMappings">
    
    <xsl:output method="text"/>
    
    <!-- type map -->
    <types:type fieldType="string">java.lang.String</types:type>
    <types:type fieldType="integer">int</types:type>
    <types:type fieldType="float">float</types:type>
    <types:type fieldType="text">java.lang.String</types:type>
    <types:type fieldType="blob">java.lang.Object</types:type>
    <types:type fieldType="boolean">boolean</types:type>
    
    <!-- template rule matching source root element -->
    <xsl:template match="/">
        <xsl:apply-templates select="mediaType" mode="buildJavaClass"/>
    </xsl:template>
    
    <xsl:template match="mediaType" mode="buildJavaClass">
/*
 * <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsDTO.java
 * 
 * This java source file was automatically generated by bibTypesDTOGen.xsl from the 
 * standard bibTypesRelationships.xml as part of the authorsite.org bibliography application
 * build process. 
 *
 * Do not edit this source file directly, but make any alterations to bibTypesRelationships.xml
 */
 package org.authorsite.bib.dto;
 import java.util.*;
 public class <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsDTO extends MediaItemDetailsDTO {
    private Integer <xsl:value-of select="@name"/>DetailsID;
     <xsl:for-each select="field"> <!-- generate private member variables -->
     <xsl:call-template name="generatePrivateMemberDeclaration">
        <xsl:with-param name="fieldName" select="@fieldName"/>
        <xsl:with-param name="fieldType" select="@fieldType"/>
     </xsl:call-template>
    </xsl:for-each>
   
   <!-- empty constructor -->
   public <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsDTO() {
   }
   
   public <xsl:call-template name="capitaliseFirstLetter"> <!-- constructor takes Integer pk -->
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsDTO(Integer newID) {
        set<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsID(newID);
   }
   
   public Integer get<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsID() {
    return <xsl:value-of select="@name"/>DetailsID;
   }
   
   /*
    * Implements the getID() method of AbstractDTO
    */
   public Integer getID() {
        return get<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsID();
   }
   
   public void set<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsID(Integer new<xsl:value-of select="@name"/>DetailsID) {
        <xsl:value-of select="@name"/>DetailsID = new<xsl:value-of select="@name"/>DetailsID;
   }
   
   public HashMap getFieldsMap() {
         HashMap myFieldsMap = new HashMap();
         <xsl:for-each select="field[@fieldType='string' or @fieldType='text' or @fieldType='blob']">
            myFieldsMap.put("<xsl:value-of select="@fieldName"/>", this.get<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@fieldName"/></xsl:call-template>());</xsl:for-each>
        <xsl:for-each select="field[@fieldType='integer']">
            myFieldsMap.put("<xsl:value-of select="@fieldName"/>", new Integer(this.get<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@fieldName"/></xsl:call-template>()));</xsl:for-each>
        <xsl:for-each select="field[@fieldType='float']">
            myFieldsMap.put("<xsl:value-of select="@fieldName"/>", new Float(this.get<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@fieldName"/></xsl:call-template>()));</xsl:for-each>
        <xsl:for-each select="field[@fieldType='boolean']">
            myFieldsMap.put("<xsl:value-of select="@fieldName"/>", new Boolean(this.get<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@fieldName"/></xsl:call-template>()));</xsl:for-each>
        return myFieldsMap;
   }
   <xsl:for-each select="field">
    <xsl:call-template name="generateGetMethod">
        <xsl:with-param name="fieldName" select="@fieldName"/>
        <xsl:with-param name="fieldType" select="@fieldType"/>
    </xsl:call-template>
     
    <xsl:call-template name="generateSetMethod">
        <xsl:with-param name="fieldName" select="@fieldName"/>
        <xsl:with-param name="fieldType" select="@fieldType"/>
    </xsl:call-template>
   </xsl:for-each>
}     
    </xsl:template>
    
    <!-- to do. This is common functionality in our xslt files. Make an xslt file with common functionality in and share it -->
    <xsl:template name="capitaliseFirstLetter">
        <xsl:param name="word"/>
<xsl:value-of select="translate (substring($word, 1, 1), 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/><xsl:value-of select="substring($word, 2)"/>
   </xsl:template>
   
   <xsl:template name="generatePrivateMemberDeclaration">
    <xsl:param name="fieldName"/>
    <xsl:param name="fieldType"/>private <xsl:value-of select="concat(document('')/*/types:type[@fieldType=$fieldType], ' ')"/> <xsl:value-of select="$fieldName"/>;
   </xsl:template>
   
     <xsl:template name="generateGetMethod">
  <xsl:param name="fieldName"/>
    <xsl:param name="fieldType"/>public <xsl:value-of select="document('')/*/types:type[@fieldType=$fieldType]"/> get<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="$fieldName"/></xsl:call-template>() {
        return <xsl:value-of select="$fieldName"/>;
   }
   
  </xsl:template>
    
   <xsl:template name="generateSetMethod">
           <xsl:param name="fieldName"/>
         <xsl:param name="fieldType"/>public void set<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="$fieldName"/>
   </xsl:call-template>(<xsl:value-of select="document('')/*/types:type[@fieldType=$fieldType]"/> new<xsl:value-of select="$fieldName"/>) {
        <xsl:value-of select="$fieldName"/> = new<xsl:value-of select="$fieldName"/>;
   }
     
   </xsl:template>

</xsl:stylesheet> 
