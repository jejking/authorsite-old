<?xml version="1.0" encoding="UTF-8" ?>

<!--
    Document   : bibTypesDetailsHandlerGen.xsl
    Created on : 06 December 2002, 11:48
    Author     : jejking
    Description:
        Writes the java source for the specific implementations of the MediaItemDetailsHandler interface
        for each of the mediaTypes defined in bibTypesRelationships.xml
        
 * Copyright (C) 2002  John King
 *
 * This file is part of the authorsite.org bibliographic
 * application.
 *
 * This application is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.        
-->

<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="text"/>
    

    <!-- template rule matching source root element -->
    <xsl:template match="/">
        <xsl:apply-templates select="mediaType" mode="buildJavaClass"/>
    </xsl:template>
    
<xsl:template match="mediaType" mode="buildJavaClass">
/*
 * <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsHandler.java 
 * 
 * This java source file was automatically generated by bibTypesDetailsHandlerGen.xsl from the 
 * standard bibTypesRelationships.xml as part of the authorsite.org bibliography application
 * build process. 
 *
 * Do not edit this source file directly, but make any alterations to bibTypesRelationships.xml
 */
package org.authorsite.bib.ejb.facade.details;
import javax.ejb.*;
import javax.naming.*;
import java.util.*;
import org.authorsite.bib.ejb.entity.*;
import org.authorsite.bib.dto.*;
import org.authorsite.bib.exceptions.*;
 
public class <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsHandler implements MediaItemDetailsHandler {
   
   private <xsl:call-template name="capitaliseFirstLetter"> <!-- declare private members.  -->
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsLocalHome localHome;
   
   public <xsl:call-template name="capitaliseFirstLetter"> 
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsHandler() {
        // obtain reference to our relevant local home interface
          try {
            Context ctx = new InitialContext();
            Object obj1 = ctx.lookup("ejb/<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsLocalEJB");
            localHome = (<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsLocalHome) obj1;
          }
          catch (NamingException ne) {
                ne.printStackTrace();
          }
   }
   
   private void validateDTO(<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/></xsl:call-template>DetailsDTO myDTO) throws InsufficientDetailException {
        <!-- as we're generating this directly from bibTypesRelationships.xml, no need to 
        look up the RulesManager. Instead, we'll hard-code it in -->
        <!-- check that those fields marked obligatory are not null in the dto -->
        HashMap fields = myDTO.getFieldsMap();
        <xsl:for-each select="field[@priority='obligatory']">
            if (fields.get("<xsl:value-of select="@fieldName"/>") == null) {
                throw new InsufficientDetailException("<xsl:value-of select="@fieldName"/> is null");
            }
        </xsl:for-each>
   }
   
   private void callAllSetters(<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/></xsl:call-template>DetailsLocal local, <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/></xsl:call-template>DetailsDTO dto) {
        <!-- this is the lazy version. A smarter one might see if there's any differences and only then
        call the setter method on the local inteface. But needs more investigation about EJB smart persistence
        strategies -->
        <xsl:for-each select="field">
            local.set<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@fieldName"/></xsl:call-template>(dto.get<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@fieldName"/></xsl:call-template>());
        </xsl:for-each>
   }
   
   /**
    * Util method. Use this one after the item has been created. No need to call the setters for the obligatory fields
    * a second time.
    */
   private void callNonObligatorySetters(<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/></xsl:call-template>DetailsLocal local, <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/></xsl:call-template>DetailsDTO dto) {
    <xsl:for-each select="field[@priority='expected' or @priority='permitted']">
            local.set<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@fieldName"/></xsl:call-template>(dto.get<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@fieldName"/></xsl:call-template>());
        </xsl:for-each>
   }
      
   public void createMediaItemDetails(MediaItemDetailsDTO detailsDTO) throws InsufficientDetailException, CreateException {
        // downcast here
        <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/></xsl:call-template>DetailsDTO myDTO = downcast(detailsDTO);
        // validate that minimum fields are here
        validateDTO(myDTO);
        <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/></xsl:call-template>DetailsLocal local = localHome.create(detailsDTO.getID().intValue()
        <xsl:for-each select="field[@priority='obligatory']">
            , myDTO.get<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@fieldName"/></xsl:call-template>()
        </xsl:for-each>  );
        // call the rest of the setters
        callNonObligatorySetters(local, myDTO);
   }
   
   public void removeMediaItemDetails(int detailsID) throws FinderException, RemoveException {
        <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/></xsl:call-template>DetailsLocal detailsLocal = localHome.findByPrimaryKey(new Integer(detailsID));
        // ok, it exists. remove it
        localHome.remove(new Integer(detailsID));
   }
   
   public void editMediaItemDetails(MediaItemDetailsDTO detailsDTO) throws InsufficientDetailException, FinderException {
        <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/></xsl:call-template>DetailsDTO myDTO = downcast(detailsDTO);
        // check the minimum fields are present
        validateDTO(myDTO);
        // get ref to the details item interface
        <xsl:call-template name="capitaliseFirstLetter"><xsl:with-param name="word" select="@name"/></xsl:call-template>DetailsLocal local = localHome.findByPrimaryKey(myDTO.getID());
        // update all the fields
        callAllSetters(local, myDTO);
   }
   
   public boolean mediaItemDetailsExists(Integer pk) {
        try {
            <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/></xsl:call-template>DetailsLocal local = localHome.findByPrimaryKey(pk);
            return true;
        }
        catch (FinderException fe) {
            return false;
        }
   }
   
   private <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/></xsl:call-template>DetailsDTO downcast(MediaItemDetailsDTO detailsDTO) {
        return (<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/></xsl:call-template>DetailsDTO) detailsDTO;
   }
   
} // end of class def.    
 </xsl:template>
 
 
 <xsl:template name="capitaliseFirstLetter">
        <xsl:param name="word"/>
<xsl:value-of select="translate (substring($word, 1, 1), 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/><xsl:value-of select="substring($word, 2)"/>
   </xsl:template>
</xsl:stylesheet> 
