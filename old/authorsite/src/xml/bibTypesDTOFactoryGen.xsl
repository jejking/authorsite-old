<?xml version="1.0" encoding="UTF-8" ?>

<!--
    Document   : bibTypesFactoryGen.xsl
    Created on : 27 November 2002, 10:41
    Author     : jejking
    Description:
        Generates custom Factory classes for DTOs each mediaType defined in bibTypesRelationships.xml
        - these look up the specific LocalHomeInterface
        - try to look up the pk passed in the constructor
        - if a Local interface is returned, this will be passed to the corresponding
          DTOAssembler and the DTO returned
        - else returns null
        
 * Copyright (C) 2002  John King
 *
 * This file is part of the authorsite.org bibliographic
 * application.
 *
 * This application is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.        
-->

<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="text"/>
    

    <!-- template rule matching source root element -->
    <xsl:template match="/">
        <xsl:apply-templates select="mediaType" mode="buildJavaClass"/>
    </xsl:template>
    
<xsl:template match="mediaType" mode="buildJavaClass">
/*
 * <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsDTOFactory.java 
 * 
 * This java source file was automatically generated by bibTypesDTOFactoryGen.xsl from the 
 * standard bibTypesRelationships.xml as part of the authorsite.org bibliography application
 * build process. 
 *
 * Do not edit this source file directly, but make any alterations to bibTypesRelationships.xml
 */   
package org.authorsite.bib.ejb.services.dto;
import javax.ejb.*;
import javax.naming.*;
import org.authorsite.bib.ejb.entity.*;
import org.authorsite.bib.dto.*;
public class <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsDTOFactory extends MediaItemDetailsDTOFactory {
   
   private Integer pk;
   private <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsLocalHome localHome;
           
   public     <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsDTOFactory (Integer newPk) {
        pk = newPk;
   }
   
   public MediaItemDetailsDTO getDTO() {
        try {
            Context ctx = new InitialContext();
            Object obj1 = ctx.lookup("ejb/<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsLocalEJB");
            localHome = (<xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsLocalHome) obj1;
            <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsLocal local = localHome.findByPrimaryKey(pk);
            <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsDTOAssembler assembler = new <xsl:call-template name="capitaliseFirstLetter">
   <xsl:with-param name="word" select="@name"/>
   </xsl:call-template>DetailsDTOAssembler(local);
            return (assembler.assembleDTO());
        }
        catch (FinderException fe) {
            return null;
        }
        catch (NamingException ne) {
            ne.printStackTrace();
            return null;
        }
   }
   
   }
    
</xsl:template>

<xsl:template name="capitaliseFirstLetter">
        <xsl:param name="word"/>
<xsl:value-of select="translate (substring($word, 1, 1), 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/><xsl:value-of select="substring($word, 2)"/>
   </xsl:template>
</xsl:stylesheet> 
