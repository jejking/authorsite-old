/*
 * LanguageListConverter.java
 *
 * Created on 29 August 2002, 11:32
 * $Header: /cvsroot/authorsite/authorsite/src/java/org/authorsite/bib/buildutil/xml2sql/LanguageListConverter.java,v 1.4 2003/03/01 13:38:27 jejking Exp $
 *
 * Copyright (C) 2002  John King
 *
 * This file is part of the authorsite.org bibliographic
 * application.
 *
 * This application is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package org.authorsite.bib.buildutil.xml2sql;
import java.io.*;
import java.text.*;
import java.util.*;
import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;
import javax.xml.parsers.*;

/**
 * <p>
 * The <code>LanguageListConverter</code> class is a key part of the build process for the
 * bibliography application. It is a simple SAX based application which parses an input xml file (which
 * will normally be <code>languages.xml</code>) and generates the sql necessary to populate the <code>language</code>
 * table in the database.
 * </p>
 *
 * <p>
 * The sql inserts the iso639 three letter language code, the English Name (although this is not used directly in
 * the application) and the language's priority within the context of the deployed application.
 * </p>
 *
 * @author  jejking
 * @version $Revision: 1.4 $
 */
public class LanguageListConverter extends DefaultHandler {
    
    private InputSource xmlIn;
    private File sqlOut;
    private SAXParserFactory spf;
    private PrintWriter out;
    
    /** Creates a new instance of LanguageListConverter
     * @param files An array of strings. files[0] is a file URL representing the input file.
     * files[1] is a file URL representing the sql file to be outputted.
     */
    public LanguageListConverter(String[] files) {
        
        xmlIn = new InputSource(files[0]);
        sqlOut = new File(files[1]);
        // set up SAX
        spf = SAXParserFactory.newInstance();
    }
    
    /** Main method of the class. Calls the constructor and then the
     * <code>execute()</code> method.
     * @param args An array of strings. args[0] is a file URL representing the input file.
     * args[1] is a file URL representing the sql file to be outputted.
     */
    public static void main(String[] args) {
        if (args.length < 2) {
            usage();
            System.exit(1);
        }
        LanguageListConverter app = new LanguageListConverter(args);
        try {
            app.execute();
        }
        catch (Exception ex) {
            ex.printStackTrace();
            System.exit(1);
        }
    }
    
    private static void usage() {
        System.out.println("Usage: java LanguageListConverter xmlFileIn sqlFileOut");
    }
    
    private void execute() throws Exception {
        // set up parser
        try {
            out = new PrintWriter(new FileOutputStream(sqlOut));
            spf.setNamespaceAware(true);
            spf.setValidating(true);
            spf.setFeature("http://apache.org/xml/features/validation/schema", true);
            
            SAXParser parser = spf.newSAXParser();
            
            parser.parse(xmlIn, this);
        }
        catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
    }
    
    public void startDocument() throws SAXException {
        // write a SQL comment
        DateFormat formatter = DateFormat.getDateTimeInstance();
        Calendar cal = Calendar.getInstance();
        out.println("-- SQL generated by org.authorsite.bib.buildutil.LanguageListConverter on "
        + formatter.format(cal.getTime()));
    }
    
    public void endDocument() throws SAXException {
        // write a SQL comment
        DateFormat formatter = DateFormat.getDateTimeInstance();
        Calendar cal = Calendar.getInstance();
        out.println("-- SQL generation finished by org.authorsite.bib.buildutil.LanguageListConverter on "
        + formatter.format(cal.getTime()));
        out.flush();
        out.close();
    }
    
    public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {
        // ignore the element langlist
        if (qName.equals("langlist")) {
            return;
        }
        if (qName.equals("language")) { // this is obviously the one we're after
            String iso639Value = atts.getValue("iso639");
            String priorityValue = atts.getValue("priority");
            String englishNameValue = atts.getValue("engName");
            
            StringBuffer sql = new StringBuffer();
            sql.append("insert into language (iso639, engName, priority) values (\'");
            sql.append(iso639Value);
            sql.append("\', \'");
            sql.append(englishNameValue);
            sql.append("\', ");
            sql.append(priorityValue);
            sql.append(");");
            out.println(sql.toString());
        }
    }
    
    public void error(SAXParseException exception) throws SAXException {
        System.out.println("Parsing error");
        System.out.println("Line " + exception.getLineNumber());
        System.out.println("Message " + exception.getMessage());
        System.exit(1);
    }
    
    public void fatalError(SAXParseException exception) throws SAXException {
        System.out.println("SAX Parsing Fatal Error");
        System.out.println("Line " + exception.getLineNumber());
        System.out.println("Message " + exception.getMessage());
        System.exit(2);
    }
    
    public void warning(SAXParseException exception) throws SAXException {
        System.out.println("Sax Parsing Warning");
        System.out.println("Line " + exception.getLineNumber());
        System.out.println("Message " + exception.getMessage());
        System.exit(3);
    }
}
